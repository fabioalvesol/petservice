
com.oliver.validator.DecimalPositivo = deve ser um número decimal positivo.

javax.faces.component.UIInput.CONVERSION	=	{0}: Ocorreu um erro de conversão.
javax.faces.component.UIInput.REQUIRED	=	O campo ''{0}'' é obrigatório.
javax.faces.component.UIInput.UPDATE	=	{0}: Ocorreu um erro ao processar as informações enviadas.
javax.faces.component.UISelectMany.INVALID	=	{0}: Erro de validação: o valor não é válido
javax.faces.component.UISelectOne.INVALID	=	{0}: Erro de validação: o valor não é válido
javax.faces.converter.BigDecimalConverter.DECIMAL	=	{2}: ''{0}'' deve ser um número decimal com sinal.
javax.faces.converter.BigDecimalConverter.DECIMAL_detail	=	{2}: ''{0}'' deve ser um número decimal com sinal formado por zero ou mais dígitos, que pode ser seguido de um ponto ou fração decimal. Exemplo: {1}
javax.faces.converter.BigIntegerConverter.BIGINTEGER	=	{2}: ''{0}'' deve ser um número formado por um ou mais dígitos.
javax.faces.converter.BigIntegerConverter.BIGINTEGER_detail	=	{2}: ''{0}'' deve ser um número formado por um ou mais dígitos. Exemplo: {1}
javax.faces.converter.BooleanConverter.BOOLEAN	=	{1}: ''{0}'' deve ser 'verdadeiro' ou 'falso'.
javax.faces.converter.BooleanConverter.BOOLEAN_detail	=	{1}: ''{0}'' deve ser 'verdadeiro' ou 'falso'. Qualquer valor diferente de 'verdadeiro' se avaliará como 'falso'.
javax.faces.converter.ByteConverter.BYTE	=	{2}: ''{0}'' deve ser um número entre -128 e 127.
javax.faces.converter.ByteConverter.BYTE_detail	=	{2}: ''{0}'' deve ser um número entre -128 e 127. Exemplo: {1}
javax.faces.converter.CharacterConverter.CHARACTER	=	{1}: ''{0}'' deve ser um caractere válido.
javax.faces.converter.CharacterConverter.CHARACTER_detail	=	{1}: ''{0}'' deve ser um caractere válido ASCII.
javax.faces.converter.DateTimeConverter.DATE	=	{2}: não foi possível reconhecer ''{0}'' como uma data.
javax.faces.converter.DateTimeConverter.DATETIME	=	{2}: não foi possível reconhecer ''{0}'' como uma data e hora.
javax.faces.converter.DateTimeConverter.DATETIME_detail	=	{2}: não foi possível reconhecer ''{0}'' como uma data e hora. Exemplo: {1}
javax.faces.converter.DateTimeConverter.DATE_detail	=	{2}: não foi possível reconhecer ''{0}'' como uma data. Exemplo: {1}
javax.faces.converter.DateTimeConverter.PATTERN_TYPE	=	{1}: Um atributo 'pattern' ou 'type' deve ser especificado para converter o valor ''{0}''.
javax.faces.converter.DateTimeConverter.TIME	=	{2}: não foi possível reconhecer ''{0}'' como uma hora.
javax.faces.converter.DateTimeConverter.TIME_detail	=	{2}: não foi possível reconhecer ''{0}'' como uma hora. Exemplo: {1}
javax.faces.converter.DoubleConverter.DOUBLE	=	{2}: ''{0}'' deve ser um número formado por um ou mais dígitos.
javax.faces.converter.DoubleConverter.DOUBLE_detail	=	{2}: ''{0}'' deve ser um número entre 4.9E-324 e 1.7976931348623157E308 Exemplo: {1}
javax.faces.converter.EnumConverter.ENUM	=	{2}: ''{0}'' deve ser convertível em um enum.
javax.faces.converter.EnumConverter.ENUM_NO_CLASS	=	{1}: ''{0}'' deve ser convertível em um enum do enum, mas sem nenhuma classe enum fornecida.
javax.faces.converter.EnumConverter.ENUM_NO_CLASS_detail	=	{1}: ''{0}'' deve ser convertível em um enum do enum, mas sem nenhuma classe enum fornecida.
javax.faces.converter.EnumConverter.ENUM_detail	=	{2}: ''{0}'' deve ser convertível em um enum de um enum que contenha a constante ''{1}''.
javax.faces.converter.FloatConverter.FLOAT	=	{2}: ''{0}'' deve ser um número formado por um ou mais dígitos.
javax.faces.converter.FloatConverter.FLOAT_detail	=	{2}: ''{0}'' deve ser um número entre 1.4E-45 e 3.4028235E38 Exemplo: {1}
javax.faces.converter.IntegerConverter.INTEGER	=	{2}: ''{0}'' deve ser um número formado por um ou mais dígitos.
javax.faces.converter.IntegerConverter.INTEGER_detail	=	{2}: ''{0}'' deve ser um número entre -2147483648 e 2147483647 Exemplo: {1}
javax.faces.converter.LongConverter.LONG	=	{2}: ''{0}'' deve ser um número formado por um ou mais dígitos.
javax.faces.converter.LongConverter.LONG_detail	=	{2}: ''{0}'' deve ser um número entre -9223372036854775808 a 9223372036854775807 Exemplo: {1}
javax.faces.converter.NumberConverter.CURRENCY	=	{2}: não foi possível reconhecer ''{0}'' como um valor monetário.
javax.faces.converter.NumberConverter.CURRENCY_detail	=	{2}: não foi possível reconhecer ''{0}'' como um valor monetário. Exemplo: {1}
javax.faces.converter.NumberConverter.NUMBER	=	{2}: ''{0}'' não é um número.
javax.faces.converter.NumberConverter.NUMBER_detail	=	{2}: ''{0}'' não é um número. Exemplo: {1}
javax.faces.converter.NumberConverter.PATTERN	=	{2}: ''{0}'' não é um padrão de número.
javax.faces.converter.NumberConverter.PATTERN_detail	=	{2}: ''{0}'' não é um padrão de número. Exemplo: {1}
javax.faces.converter.NumberConverter.PERCENT	=	{2}: não foi possível reconhecer ''{0}'' como uma porcentagem.
javax.faces.converter.NumberConverter.PERCENT_detail	=	{2}: não foi possível reconhecer ''{0}'' como uma porcentagem. Exemplo: {1}
javax.faces.converter.STRING	=	{1}: não foi possível converter ''{0}'' em uma sequência.
javax.faces.converter.ShortConverter.SHORT	=	{2}: ''{0}'' deve ser um número formado por um ou mais dígitos.
javax.faces.converter.ShortConverter.SHORT_detail	=	{2}: ''{0}'' deve ser um número entre -32768 e 32767 Exemplo: {1}
javax.faces.validator.BeanValidator.MESSAGE	=	{1} {0}
javax.faces.validator.DoubleRangeValidator.MAXIMUM	=	{1}: Erro de validação: o valor é maior do que o máximo permitido de "{0}"
javax.faces.validator.DoubleRangeValidator.MINIMUM	=	{1}: Erro de validação: o valor é menor do que o mínimo permitido de "{0}"
javax.faces.validator.DoubleRangeValidator.NOT_IN_RANGE	=	{2}: Erro de validação: o atributo especificado não está entre os valores esperados de {0} e {1}.
javax.faces.validator.DoubleRangeValidator.TYPE	=	{0}: Erro de validação: o valor não é do tipo correto
javax.faces.validator.LengthValidator.MAXIMUM	=	O campo ''{1}'' deve ser informado com no máximo "{0}" caracteres.
javax.faces.validator.LengthValidator.MINIMUM	=	O campo ''{1}'' deve ser informado com no mínimo "{0}" caracteres.
javax.faces.validator.LongRangeValidator.MAXIMUM	=	{1}: Erro de validação: o valor é maior do que o máximo permitido de "{0}"
javax.faces.validator.LongRangeValidator.MINIMUM	=	{1}: Erro de validação: o valor é menor do que o mínimo permitido de "{0}"
javax.faces.validator.LongRangeValidator.NOT_IN_RANGE	=	{2}: Erro de validação: o atributo especificado não está entre os valores esperados de {0} e {1}.
javax.faces.validator.LongRangeValidator.TYPE	=	{0}: Erro de validação: o valor não é do tipo correto.
javax.faces.validator.NOT_IN_RANGE	=	Erro de validação: o atributo especificado não está entre os valores esperados de {0} e {1}.
javax.faces.validator.RegexValidator.MATCH_EXCEPTION	=	Erro na expressão regular.
javax.faces.validator.RegexValidator.MATCH_EXCEPTION_detail	=	Erro na expressão regular, ''{0}''
javax.faces.validator.RegexValidator.NOT_MATCHED	=	Padrão Regex não corresponde
javax.faces.validator.RegexValidator.NOT_MATCHED_detail	=	O padrão Regex de ''{0}'' não corresponde
javax.faces.validator.RegexValidator.PATTERN_NOT_SET	=	O padrão Regex deve ser definido.
javax.faces.validator.RegexValidator.PATTERN_NOT_SET_detail	=	O padrão Regex deve ser definido como um valor não vazio.

javax.validation.constraints.NotNull.message = {0} deve ser informado.
javax.validation.constraints.Size.message = deve ter tamanho entre {min} e {max}.
javax.validation.constraints.DecimalMin.message = deve ser maior ou igual a {value}.
org.hibernate.validator.constraints.NotEmpty.message = deve ser informado.